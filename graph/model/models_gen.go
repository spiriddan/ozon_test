// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Comment struct {
	ID         int        `json:"id"`
	Body       string     `json:"body"`
	ParentID   int        `json:"parentID"`
	ParentType Parent     `json:"parentType"`
	Replies    []*Comment `json:"replies"`
}

type Mutation struct {
}

type Post struct {
	ID         int        `json:"id"`
	Title      string     `json:"title"`
	Body       *string    `json:"body,omitempty"`
	CanComment bool       `json:"canComment"`
	Comments   []*Comment `json:"comments"`
}

type PostFilter struct {
	IDIn int `json:"idIn"`
}

type PostPayload struct {
	Posts []*Post `json:"posts"`
}

type PostsPayload struct {
	Posts []*Post `json:"posts"`
}

type Query struct {
}

type SubsInput struct {
	ID int `json:"ID"`
}

type Subscription struct {
}

type CreateCommentInput struct {
	Body       string `json:"body"`
	ParentType Parent `json:"parentType"`
	ParentID   int    `json:"parentID"`
}

type CreateCommentPayload struct {
	Comment *Comment `json:"comment"`
}

type CreatePostInput struct {
	Title      string  `json:"title"`
	Body       *string `json:"body,omitempty"`
	CanComment bool    `json:"canComment"`
}

type CreatePostPayload struct {
	Post *Post `json:"post"`
}

type Parent string

const (
	ParentPost    Parent = "post"
	ParentComment Parent = "comment"
)

var AllParent = []Parent{
	ParentPost,
	ParentComment,
}

func (e Parent) IsValid() bool {
	switch e {
	case ParentPost, ParentComment:
		return true
	}
	return false
}

func (e Parent) String() string {
	return string(e)
}

func (e *Parent) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Parent(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Parent", str)
	}
	return nil
}

func (e Parent) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
